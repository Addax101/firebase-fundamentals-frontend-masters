rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {

    function isUserOwned(uid) {
      return uid == request.auth.uid;
    }

    function isValidEmail() {
      return request.resource.data.email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$');
    }

    function hasUserAllKeys() {
      return request.resource.data.keys().hasAll([
        'first',
        'email',
      ]);
    }

    function isUserObject() {
      return hasUserAllKeys() && isValidEmail();
    }

    function costsMoreThanZero() {
      let data = request.resource.data;
      return data.cost is number && data.cost > 0;
    }

    function isExpenseObject() {
      return request.resource.data.keys().hasAll([
        'cost',
        'date',
      ]) && costsMoreThanZero();
    }

    function dateIsNotModified() {
      let diff = request.resource.data.diff(resource.data);
      return diff.unchangedKeys().hasAll([ "date" ]);
    }

    match /users/{uid} {
      allow read: if isUserOwned(uid);
      allow write: if isUserOwned(uid) && isUserObject();

      match /expenses/{id} {
        allow read: if isUserOwned(uid);
        allow create: if isUserOwned(uid) && isExpenseObject();
        allow update: if isUserOwned(uid) && isExpenseObject() && dateIsNotModified();
      }
    }
  }
}
